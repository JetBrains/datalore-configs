replicaCount: 1

dataloreVersion: ""

serverImage:
  repository: jetbrains/datalore-server
  pullPolicy: IfNotPresent
postgresImage:
  repository: jetbrains/datalore-postgres
  pullPolicy: IfNotPresent
databaseCommandImage:
  repository: jetbrains/datalore-database-command
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

dataloreSecurityContext:
  runAsUser: 5000
postgresSecurityContext:
  runAsUser: 999

securityContext:
  fsGroup: 5000

service:
  type: ClusterIP
  port: 8080

computationPort: 4060

nodePorts:
  enabled: false
  httpPort: 30090
  agentsManagerPort: 30091
  computationPort: 30092
  httpInternalPort: 30093

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

dataloreResources: {}
postgresResources: {}

volumes: []
#  - name: storage
#    emptyDir: { }
#  - name: postgresql-data
#    emptyDir: { }

volumeClaimTemplates: []

nodeSelector: {}

tolerations: []

affinity: {}

dbRootPassword: ""
internalDatabase: true

sqlServerHost: ""
sqlServerPort: ""

agentsConfig: {}
connectionChecker: {}
introspection: {}
namespacesLoader: {}
plansConfig: []
logbackConfig: ""
customEnvs: {}
dataloreEnv: {}
